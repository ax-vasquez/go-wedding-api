// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/entree": {
            "post": {
                "description": "Create a new entree and return the new record's data to the caller",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entrees"
                ],
                "summary": "create entree",
                "parameters": [
                    {
                        "description": "The input entree data (only ` + "`" + `option_name` + "`" + ` is required)",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Entree"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_ENTREE"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_ENTREE"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_ENTREE"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an entree and returns a response to indicate success or failure",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entrees"
                ],
                "summary": "deletes an entree",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Entree ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_ENTREE"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_ENTREE"
                        }
                    }
                }
            }
        },
        "/entrees": {
            "get": {
                "description": "Gets the selected entree for the given user ID (empty array if no selection has been made), or a list of all available entrees if no user ID is provided",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entrees"
                ],
                "summary": "gets one or all entrees",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_ENTREE"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_ENTREE"
                        }
                    }
                }
            }
        },
        "/horsdoeuvres": {
            "get": {
                "description": "Gets the selected hors doeuvres for the given user ID (empty array if no selection has been made), or a list of all available entrees if no user ID is provided",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hors doeuvres"
                ],
                "summary": "gets one or all hors doeuvres",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_HORS_DOEUVRES"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_HORS_DOEUVRES"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates an hors doeuvres and return the new record's data to the caller",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hors doeuvres"
                ],
                "summary": "creates an hors doeuvres",
                "parameters": [
                    {
                        "description": "The input hors doeuvres data (only ` + "`" + `option_name` + "`" + ` is required)",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.HorsDoeuvres"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_HORS_DOEUVRES"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_HORS_DOEUVRES"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_HORS_DOEUVRES"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an hors doeuvres and returns a response to indicate success or failure",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hors doeuvres"
                ],
                "summary": "deletes an hors doeuvres",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Hors Doeuvres ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_HORS_DOEUVRES"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_HORS_DOEUVRES"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_HORS_DOEUVRES"
                        }
                    }
                }
            }
        },
        "/invitee/{id}": {
            "delete": {
                "description": "Deletes an invitee",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user invitee"
                ],
                "summary": "deletes an invitee",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID of the invitee to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USER_INVITEES"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USER_INVITEES"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Logs in a user and returns the user details for the user (if authentication is successful)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logs in a user",
                "parameters": [
                    {
                        "description": "Log in details",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UserLoginInput"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USERS"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USERS"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USERS"
                        }
                    }
                }
            }
        },
        "/signup": {
            "post": {
                "description": "Signs up a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Signs up a new user",
                "parameters": [
                    {
                        "description": "Sign up details",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UserSignupInput"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USERS"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USERS"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USERS"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "Creates a user with the given input and returns an array of user objects, containing the newly-created user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "admin-only operation to create a user",
                "parameters": [
                    {
                        "description": "The input user data (only ` + "`" + `first_name` + "`" + `, ` + "`" + `last_name` + "`" + ` and ` + "`" + `email` + "`" + ` are required)",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USERS"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USERS"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USERS"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an user and returns a response to indicate success or failure",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "admin-only operation to delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USERS"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USERS"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USERS"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a user with the given input",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "updates a user",
                "parameters": [
                    {
                        "description": "The input user update data (only ` + "`" + `id` + "`" + ` is required, but is not useful without setting other fields to update)",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USERS"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USERS"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USERS"
                        }
                    }
                }
            }
        },
        "/user/{user_id}/entrees": {
            "get": {
                "description": "Gets the selected entree for the given user ID (empty array if no selection has been made), or a list of all available entrees if no user ID is provided",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entrees"
                ],
                "summary": "gets one or all entrees",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_ENTREE"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_ENTREE"
                        }
                    }
                }
            }
        },
        "/user/{user_id}/horsdoeuvres": {
            "get": {
                "description": "Gets the selected hors doeuvres for the given user ID (empty array if no selection has been made), or a list of all available entrees if no user ID is provided",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hors doeuvres"
                ],
                "summary": "gets one or all hors doeuvres",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_HORS_DOEUVRES"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_HORS_DOEUVRES"
                        }
                    }
                }
            }
        },
        "/user/{user_id}/invite-user": {
            "post": {
                "description": "Invites a user for ght given user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user invitee"
                ],
                "summary": "invite a user",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Inviting user ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USER_INVITEES"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USER_INVITEES"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USER_INVITEES"
                        }
                    }
                }
            }
        },
        "/user/{user_id}/invitees": {
            "get": {
                "description": "Gets invitee user data for users invited by the given inviter ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user invitee"
                ],
                "summary": "gets invitees for user",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Invitee search by inviting user ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USER_INVITEES"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USER_INVITEES"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USER_INVITEES"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Gets user(s) by the ID(s) in the request query string, ` + "`" + `?ids=` + "`" + `",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "gets user(s)",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "user search by id",
                        "name": "ids",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USERS"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.V1_API_RESPONSE_USERS"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "gin.H": {
            "type": "object",
            "additionalProperties": {}
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "models.Entree": {
            "type": "object",
            "required": [
                "option_name"
            ],
            "properties": {
                "created_at": {
                    "description": "The time the record was created at\n\nWe override Gorm's CreatedAt field so we can set the gorm:\"\u003c-:create\" directive,\nwhich prevents this field from being altered once the record is created",
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "string"
                },
                "option_name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.HorsDoeuvres": {
            "type": "object",
            "required": [
                "option_name"
            ],
            "properties": {
                "created_at": {
                    "description": "The time the record was created at\n\nWe override Gorm's CreatedAt field so we can set the gorm:\"\u003c-:create\" directive,\nwhich prevents this field from being altered once the record is created",
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "string"
                },
                "option_name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name"
            ],
            "properties": {
                "created_at": {
                    "description": "The time the record was created at\n\nWe override Gorm's CreatedAt field so we can set the gorm:\"\u003c-:create\" directive,\nwhich prevents this field from being altered once the record is created",
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "email": {
                    "description": "The user's email (must be unique); this field is an index.",
                    "type": "string"
                },
                "entreeSelection": {
                    "$ref": "#/definitions/models.Entree"
                },
                "entree_selection_id": {
                    "description": "The ID of the entree the user has selected; is null until the user makes a selection.",
                    "type": "string"
                },
                "first_name": {
                    "description": "The user's first name.",
                    "type": "string"
                },
                "horsDoeuvresSelection": {
                    "$ref": "#/definitions/models.HorsDoeuvres"
                },
                "hors_doeuvres_selection_id": {
                    "description": "The ID of the hors doeuvres the user has selected; is null until the user makes a selection.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_going": {
                    "description": "Whether or not the user is attending.",
                    "type": "boolean"
                },
                "last_name": {
                    "description": "The user's last name.",
                    "type": "string"
                },
                "password": {
                    "description": "Either a hash of the user's password (when stored in the DB), or a plain-text representation of the password (plain-text version is never stored)",
                    "type": "string"
                },
                "refresh_token": {
                    "description": "The user's auth refresh token.",
                    "type": "string"
                },
                "role": {
                    "description": "The user's role, which can be \"GUEST\", \"INVITEE\" or \"ADMIN\". Defaults to \"GUEST\".",
                    "type": "string"
                },
                "token": {
                    "description": "The user's auth token.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.EntreeData": {
            "type": "object",
            "properties": {
                "entrees": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Entree"
                    }
                }
            }
        },
        "types.HorsDoeuvresData": {
            "type": "object",
            "properties": {
                "hors_doeuvres": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.HorsDoeuvres"
                    }
                }
            }
        },
        "types.UserData": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "types.UserInviteeData": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "types.UserLoginInput": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "types.UserSignupInput": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "types.V1_API_RESPONSE_ENTREE": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.EntreeData"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "types.V1_API_RESPONSE_HORS_DOEUVRES": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.HorsDoeuvresData"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "types.V1_API_RESPONSE_USERS": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.UserData"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "types.V1_API_RESPONSE_USER_INVITEES": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.UserInviteeData"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
